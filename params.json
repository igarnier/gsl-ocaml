{
  "name": "gsl-ocaml",
  "tagline": "OCaml bindings to the GSL (GNU Scientific Library).",
  "body": "GSL-OCaml - GSL-Bindings for OCaml\r\n==================================\r\n\r\nThis library was written by [Olivier Andrieu](http://oandrieu.nerim.net/ocaml).\r\nThis version (gsl-ocaml) contains patches by [Markus\r\nMottl](http://www.ocaml.info) that may be merged into the original distribution\r\nin the future.\r\n\r\nGSL-OCaml is an interface to the [GSL](http://www.gnu.org/software/gsl)\r\n(GNU scientific library) for the [OCaml](http://www.ocaml.org)-language.\r\nThe currently latest GSL-version known to be compatible is 2.0.\r\n\r\nRequirements\r\n------------\r\n\r\nThe platform must not align doubles on double-word addresses, i.e. the C-macro\r\n`ARCH_ALIGN_DOUBLE` must be undefined in the OCaml C-configuration header in\r\n`<caml/config.h>`.\r\n\r\nInstallation\r\n------------\r\n\r\n```sh\r\n$ ./configure\r\n$ make\r\n$ make install\r\n```\r\n\r\n### Configuring alternative BLAS-libraries\r\n\r\nThe underlying GSL-library depends on a C-implementation of the BLAS-library\r\n(Basic Linear Algebra Subroutines).  It comes with its own implementation,\r\n`gslcblas`, which GSL will link with by default, e.g.:\r\n\r\n```sh\r\n$ gsl-config --libs\r\n-L/opt/local/lib -lgsl -lgslcblas\r\n```\r\n\r\nThis implementation is usually considerably slower than alternatives like\r\n[OpenBLAS](http://www.openblas.net) or [ATLAS (Automatically Tuned Linear\r\nAlgebra Software)](http://math-atlas.sourceforge.net) or miscellaneous\r\nplatform-specific vendor implementations.\r\n\r\nIf you want GSL-OCaml to link with another BLAS-implementation by\r\ndefault, you will need to set an environment variable before starting\r\nthe build process.  For example, if you are installing the package via\r\n[OPAM](http://opam.ocamlpro.com), you may want to do the following:\r\n\r\n```sh\r\n$ export GSL_CBLAS_LIB=-lopenblas\r\n$ gsl-config --libs\r\n-L/opt/local/lib -lgsl -lopenblas\r\n$ opam install gsl-ocaml\r\n```\r\n\r\nThe above shows that after setting the environment variable `GSL_CBLAS_LIB`,\r\n`gsl-config` will return the correct linking flags to the build process\r\nof GSL-OCaml.\r\n\r\nNote that on Mac OS X GSL-OCaml requires the Apple-specific, highly optimized\r\nvendor library `vecLib`, which is part of the Accelerate-framework, and will\r\nautomatically link with it.\r\n\r\nDocumentation\r\n-------------\r\n\r\nCheck the [GSL manual](http://www.gnu.org/software/gsl/manual/html_node)\r\nto learn more about the GNU Scientific Library.\r\n\r\nYou can browse the OCaml module interfaces as `ocamldoc`-generated HTML files\r\nin directory `API.docdir` after building the documentation with `make doc`.\r\nIt is also available [online](http://mmottl.github.io/gsl-ocaml/api).\r\n\r\nUsage Hints\r\n-----------\r\n\r\n### Vectors and Matrices\r\n\r\nThere are several data types for handling vectors and matrices.\r\n\r\n  * Modules `Gsl.Vector`, `Gsl.Vector.Single`, `Gsl.Vector_complex`,\r\n    `Gsl.Vector_complex.Single`, and the corresponding matrix modules use\r\n    bigarrays with single or double precision and real or complex values.\r\n\r\n  * Modules `Gsl.Vector_flat`, `Gsl.Vector_complex_flat`, and the corresponding\r\n    matrix modules use a record wrapping a regular OCaml float array.  This is\r\n    the equivalent of the `gsl_vector` and `gsl_matrix` structs in GSL.\r\n\r\n  * Module `Gsl.Vectmat` defines a sum type with polymorphic variants\r\n    that regroups these two representations.  For instance:\r\n\r\n    ```ocaml\r\n    Gsl.Vectmat.v_add (`V v1) (`VF v2)\r\n    ```\r\n\r\n    adds a vector in an OCaml array to a bigarray.\r\n\r\n  * Modules `Gsl.Blas Gsl.Blas_flat` and `Gsl.Blas_gen` provide a (quite\r\n    incomplete) interface to CBLAS for these types.\r\n\r\n### ERROR HANDLING\r\n\r\nErrors in GSL functions are reported as exceptions:\r\n\r\n```ocaml\r\nGsl.Error.Gsl_exn (errno, msg)\r\n```\r\n\r\nYou have to call `Gsl.Error.init ()` to initialize error reporting.  Otherwise,\r\nthe default GSL error handler is used and aborts the program, leaving a core\r\ndump (not so helpful with OCaml).\r\n\r\nIf a callback (for minimizers, solvers, etc.) raises an exception, `gsl-ocaml`\r\neither returns `GSL_FAILURE` or `NaN` to GSL depending on the type of callback.\r\nIn either case the original OCaml exception is not propagated.  The GSL\r\nfunction will either return normally (but probably with values containing\r\n`NaN`s somewhere) or raise a `Gsl_exn` exception.\r\n\r\n---------------------------------------------------------------------------\r\n\r\nContact Information and Contributing\r\n------------------------------------\r\n\r\nIn the case of bugs, feature requests, contributions and similar, you can\r\ncontact me here: <markus.mottl@gmail.com>\r\n\r\nUp-to-date information should be available at:\r\n<http://mmottl.github.io/gsl-ocaml>\r\n\r\nEnjoy!\r\n\r\nMarkus Mottl on September 21, 2016\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}